一，如果成员对象中存在于其它一个或多个对象共享的情况；
   就必需使用引用计数来跟踪仍旧访问着共享对象的对象数量。
p161-162
private static long counter = 0;
private final long id = counter++;
private int refcount = 0;
|
基础概念（看的时候觉得简单。。。其实压根可能也没太看懂，且看过就会忘。。。）；

二，接口（策略设计模式+适配器设计模式）；
p175-178
我觉得大概的逻辑是这样的：
class Processor{
   public String name(){
      return getClass().getSimpleName();
   }
   Object process(Object input){return input;}
}
|
策略设计模式:
public class Apply{
	public static void process(Processor p,Object s){
		System.out.println("Using Processor " + p.name());
		System.out.println(p.process(s));
	}
}
|
但是Processor和Apply.process()方法之间的耦合过紧。。。
采用接口，将耦合变松动：
public interface Processor {
	String name();
	Object process(Object input);
}
适配器设计模式：
class StringMixerAdapter implements Processor {
	StringMixer stringMixer;
	public StringMixerAdapter(StringMixer stringMixer) {
		this.stringMixer = stringMixer;
	}
   	public String name() { return "StringMixerAdapter"; }
	public String process(Object input) {
		return stringMixer.process((String)input);
	}	
}
public class StringMixerProcessor {
	public static void main(String[] args) {
	//	String s = new String(args[0]);
		String s = "at interfaces.interfaceprocessor.StringMixerProcessor.main";
		Apply.process(new StringMixerAdapter(new StringMixer()), s);
	}
}
|
这个东东其实。。。我可能又是先预设的想太多了。。。（不用管其中的“代理”）

三，匿名内部类的美妙之处；
接口；能用private的，就用private；
p187,P200;
工厂方法设计模式 VS 匿名内部类；
|
接口是实现多重继承的途径，而生成遵循某个接口对象的典型方式就是工厂方法设计模式；
这与直接调用构造器不同，我们在工厂对象上调用的是创建方法，而该工厂对象将生成接口的某个实现的对象；


四，为什么需要内部类；
p204-211
使用内部类最吸引人的原因是：
每个内部类都能独立地继承自一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响；
且内部类允许继承多个非接口类型（类或抽象类）；
|
1，
例如：内部类与控制框架。——》第18章，将会看到内部类如何优雅地描述图形用户界面的行为；
例子：控制温室的运作：控制灯光、水、温度调节器的开关、以及响铃和重新启动系统。
对于温室系统的每一种行为，都继承一个新的Event内部类，并在要实现的action()中编写控制代码。
2，
例如：闭包与回调。
例子：
如果Callee2继承了MyIncrement，就不能为了Increment的用途而覆盖increment()方法，于是只能使用内部类独立地实现Increment。
且可以控制该内部类为private，通过返回内部类引用调取；
|
回调的价值在于它的灵活性——可以在运行时动态地决定需要调用什么方法。——》第22章，这章里实现GUI功能的时候，到处都用到了回调；


五，设计。。。
p223
练习4：创建一个生成器类，它可以在每次调用其next()方法时，产生由你最喜欢的电影（你可以使用Snow White或Star Wars）的字符构成的名字（作为String对象）。
在字符列表中的电影名用完之后，循环到这个字符列表的开始处。
使用这个生成器类来填充数组、ArrayList、LinkedList、HashSet、LinkedHashSet和TreeSet，然后打印每一个容器。
|
设计+工具；
（三个方法，switch,Collection）


















