（回顾学习过程，描述自己的思维过程，省略其中不必要的环节和薄弱环节，调整自己的学习路径和目标的匹配度）

前言：

不能依靠创建命名的引用来持有每一个对象； ——》第一遍看没觉得这句话点醒 ——》实际上没有理解“对象”；

基本的类型是List、Set、Queue、和Map。。。； ——》实际上对于这些，就略过，因为是完全新内容；


11.1 泛型和类型安全的容器 ——》 完全新内容，需要看下文，且看的时候随时记住；

Java编译器会报告警告信息，因为这个示例没有使用泛型。 ——》 完全新内容，需要看下文，且看的时候随时记住；
ArrayList apples = new ArrayList();
apples.add(new Orange());
((Apple)apples.get(i)).id();
|
运行时错误；
|
具体例子的说明和解释：
没有使用泛型——》需要强制转换——》可能就会出现前面提及的异常错误；

预定义的泛型：
|
尖括号括起来的是类型参数（可以有多个）
|
可以在编译器防止将错误类型的对象放置在容器中；
ArrayList<Apple> apples = new ArrayList<Apple>();
|
可以防止将Orange放置到apples中，因此变成了一个编译器错误，而不再是运行时错误；
同时向上转型也可以像作用于其它类型一样作用于泛型；

11.2基本概念：

Java容器类类库可以划分两个基本概念：
1，独立元素序列(Collection):List,Set,Queue;
2，“键值对”对象(Map):Map;
|
你编写的大部分代码都是在与这些接口打交道。
|
使用接口，向上转型：
List<Apple> apples = new ArrayList<Apple>();
List<Apple> apples = new LinkedList<Apple>();
但例如如果需要LinkedList中额外的功能，就不能这么写了；

Collection接口：
Collection<Integer> c = new ArrayList<Integer>();


11.3添加一组元素：

Arrays类和Collections类;——》连着看下面的例子然后再看前面的概念介绍，才发现说的真是言简意赅的感觉；
|
Arrays.asList():接受一个数组或是一个用逗号分隔的元素列表；
Collections.addAll():接受一个Collection对象,以及一个数组或是一个用逗号分隔的元素列表；
|
Collection.addAll()方法运行起来要快的多，而且构建一个不包含元素的Collection，然后调用Collections.addAll()这种方式很方便，因此它是首选方式；
例：
Collection<Integer> collection = new ArrayList<Integer>();
Collections.addAll(collection,1,2,3,4,5,6);

注意：
可以直接使用Arrays.asList()的输出，将其当作List；(p221)
但是，其底层表示的是数组，因此不能调整尺寸，而且其对所产生的List类型做出了最理想的假设；
|
List<Snow> snow = Arrays.asList();


11.4 容器的打印：

你必须使用Arrays.toString()来产生数组的可打印表示，但是打印容器无需任何帮助（其默认的打印行为是使用容器提供的toString()方法）；
|
System.out.println(collection);

再大概说明了下Java容器类库的主要类型：（p222-223）
List:特定的顺序保存一组元素；LinkedList包含的操作多于多于ArrayList,这两个均是按插入的顺序保存元素;
Set:元素不能重复；HashSet,TreeSet,LinkedHashSet;
Queue:只允许在容器的一“端”插入对象，并从另一“端”移除对象;HashMap,TreeMap,LinkedHashMap;


11.5 List
ArrayList,LinkedList
通过例子直观的介绍了其中的多种方法；


11.6 迭代器

如果从高层的角度思考；——》教你如何思考；
|
缺点：要使用容器，必须对容器的确切类型编码；
|
使用：迭代器（也是一种设计模式）：
迭代器是一个对象，它的工作是遍历并选择序列中的对象，而客户端程序员不必知道或关心该序列底层的结构；

但迭代器通常也被称为“轻量级对象”（创建它的代价小）；因此，对迭代器有些奇怪的限制；
例如，Java的Iterator只能单向移动，这个Iterator只能用来：
1）使用方法iterator()要求容器返回一个Iterator，Iterator将准备好返回序列的第一个元素；
2）使用next()获得序列中的下一个元素；
3）使用hasNext()检查序列中是否还有元素；
4）使用remove()将迭代器新近返回的元素删除；
|
例子：
List<Pet> pets = Pets.arrayList(12);
Iterator<Pet> it = pets.iterator();
while(it.hasNext()){
  Pet p = it.next();
  System.out.println(p.id()+":"+p)
}
it = pets.iterator();
for(i = 0;i<6;i++){
  it.next();
  it.remove();
}
|
11.6.1 ListIterator
ListIterator是一个更强大的Iterator的子类型，它只能用于各种List类的访问；
可以向前移动，可以向后移动，返回当前位置的前一个和后一个元素的索引，还可以替换元素；
还可以通过listIterator(n)方法创建一个一开始就指向列表索引为n的元素处的ListIterator;
|
例子：
List<Pet> pets = Pets.arrayList(12);
ListIterator<Pet> it = pets.listIterator();

11.7 LinkedList
LinkedList还添加了可以使其用作栈，队列或双端队列的方法；
（p228-229）


11.8 Stack
“栈”通常是指“后进先出”的容器；
LinkedList具有能够直接实现栈的所有功能的方法，因此可以直接将LinkedList作为栈使用；
不过，有时一个真正的“栈”更能把事情说清楚；
（p230）


11.9 Set
Set具有与Collection完全一样的接口，只是行为不同；
Set不保存重复的元素；
Set中最常用被使用的是测试归属性，你可以很容易的询问某个对象是否在某个Set中，
因此通常会选择HashSet的实现，它专门对快速查找进行了优化。
|
例子：
Set<Integer> intset = new HashSet<Integer>();
|
例子：如果想对结果排序：可以用TreeSet代替HashSet:
SortedSet<Integer> intset = new TreeSet<Integer>();
|
例子：或者，如果按字母序排序，可以向TreeSet的构造器传入String.CASE_INSENTIVE_ORDER：
Set<String> words = new TreeSet<String>(String.CASE_INSENTIVE_ORDER);
|
这里最常见的操作之一，就是使用contains()测试Set的归属性：
set1.contains("H");
set1.containsAll(set2);



























