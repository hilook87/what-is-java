
初始化

许多程序错误都源于：程序员忘记初始化变量。

在创建对象时被自动调用的特殊方法：构造器。

调用构造器是编译器的责任，所以必须让编译器知道应该调用哪个方法。——》构造器的命名，构造器没有返回值；

在创建对象时，将会为对象分配存储空间，并调用相应的构造器。《——在你能操作对象之前，它已经被恰当的初始化了；

构造器可以有形式参数；
没有形式参数的构造器-默认构造器；如果类中没有构造器，编译器会自动创建一个默认构造器；

从概念上讲，“初始化”和“创建”是彼此独立的，但在Java中，“初始化”和“创建”捆绑在一起，两者不能分离；

一，成员初始化

Java尽力保证：所有变量在使用前都能得到恰当的初始化。
             对于方法的局部变量，Java以编译时错误的形式来贯彻这种保证。

类的每个基本类型数据成员保证都会有一个初始值；
类里定义一个对象引用时，如果不将其初始化，此引用就会获得一个特殊值null;


二，构造器初始化

可以用构造器来进行初始化。
但是，无法阻止自动初始化的进行，它将在构造器被调用之前发生
（例如对于所有基本类型和对象引用，包括在定义时已经指定初始值的变量）。

编译器不会强制你一定要在构造器的某个地方或在使用它们之前对元素进行初始化——因为初始化早已得到了保证。



初始化顺序
  p147...
  需要再往前看。。。
  
  初始化顺序问题：p147,练习23，LoadClass.java (运行结果：“reusing.A@61de33”，这是什么意思？ )
  
  按照p146，继承与初始化，大概的顺序是这样的：
  1，从基类到导出类的静态成员初始化；
  2，main
  3，基类对象初始化：基类成员初始化，基类构造器；
  4，导出类对象初始化：导出类成员初始化，导出类构造器；
  
  其实为什么要先静态成员初始化呢？---》待考虑。。。
  
  tips:
  一，变量；（按照变量定义的先后顺序，即使散布在方法定义之间，会在任何方法被调用之前初始化）
  二，static；
      1，只有在必要时刻才会进行（首次生成这个类的一个对象或者首次访问属于这个类的静态数据成员（即使从未生成过那个类的对象））；
      2，仅执行一次，不会再次被初始化；
      3，先静态对象，再非静态对象；
      
      
  
